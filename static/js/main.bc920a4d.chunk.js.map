{"version":3,"sources":["App.tsx","helpers/Intersection.ts","index.tsx"],"names":["ctx","App","useState","drawingState","setDrawingState","elements","setElements","intersectionState","setIntersectionState","intersectionState2","setIntersectionState2","isDrawing","setIsDrawing","buttonclick","setButtonClick","canvasRef","useRef","useEffect","canvas","current","getContext","clearRect","width","height","length","undefined","forEach","x1","y1","x2","y2","beginPath","lineWidth","moveTo","lineTo","stroke","item","strokeStyle","fillStyle","arc","x","y","Math","PI","fill","style","border","onClick","event","prev","clientX","clientY","onContextMenu","e","preventDefault","pop","onMouseMove","index","x1_","y1_","mass","intersectionPoint","from1","to1","from2","to2","dX","dY","determinant","lambda","gamma","intersection","push","elementsCopy","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc920a4d.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './App.scss';\nimport { intersection } from './helpers/Intersection';\nimport { Point2D, Element } from './types';\n\nexport let ctx: CanvasRenderingContext2D | null = null;\n\nexport const App: React.FC = () => {\n  const [drawingState, setDrawingState] = useState(true);\n  const [elements, setElements] = useState<Element[]>([]);\n  const [intersectionState, setIntersectionState] = useState<Point2D[]>([]);\n  const [intersectionState2, setIntersectionState2] = useState<Point2D[]>([]);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [buttonclick, setButtonClick] = useState(false);\n\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  const startDrawing = (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    setDrawingState(prev => !prev);\n\n    if (drawingState) {\n      const { clientX, clientY } = event;\n\n      setElements(prev => [...prev, {\n        x1: clientX, y1: clientY, x2: clientX, y2: clientY,\n      }]);\n\n      setIsDrawing(true);\n    } else {\n      setIntersectionState2(prev => [...prev, ...intersectionState]);\n      setIsDrawing(false);\n    }\n  };\n\n  const draw = (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (isDrawing) {\n      const { clientX, clientY } = event;\n\n      const index = elements.length - 1;\n      const { x1: x1_, y1: y1_ } = elements[index];\n\n      if (elements.length !== 0 && elements[0] !== undefined) {\n        const mass: Point2D[] = [];\n\n        elements.forEach(({\n          x1, y1, x2, y2,\n        }) => {\n          if (x1_ !== x1) {\n            const intersectionPoint = intersection({ x: x1_, y: y1_ }, { x: clientX, y: clientY }, { x: x1, y: y1 }, { x: x2, y: y2 });\n\n            if (intersectionPoint) {\n              if (ctx) {\n                ctx.beginPath();\n                ctx.arc(intersectionPoint.x, intersectionPoint.y, 5, 0, Math.PI * 2, true);\n                ctx.fill();\n              }\n\n              mass.push({ x: intersectionPoint.x, y: intersectionPoint.y });\n            }\n          }\n        });\n        setIntersectionState(mass);\n      }\n\n      const elementsCopy = [...elements];\n\n      elementsCopy[index] = {\n        x1: x1_, y1: y1_, x2: clientX, y2: clientY,\n      };\n      setElements(elementsCopy);\n    }\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n\n    if (canvas) {\n      ctx = canvas.getContext('2d');\n      if (!buttonclick) {\n        ctx?.clearRect(0, 0, canvas.width, canvas.height);\n      }\n    }\n    // if (buttonclick) {\n    //   collapse(elements)\n\n    //   setButtonClick(false)\n    //   setElements([])\n    // }\n    if (elements.length !== 0 && elements[0] !== undefined) {\n      elements.forEach(({\n        x1, y1, x2, y2,\n      }) => {\n        if (ctx) {\n          ctx.beginPath();\n          ctx.lineWidth = 3;\n          ctx.moveTo(x1, y1);\n          ctx.lineTo(x2, y2);\n          ctx.stroke();\n        }\n      });\n\n      intersectionState.forEach((item) => {\n        if (ctx) {\n          ctx.strokeStyle = 'black';\n          ctx.beginPath();\n          ctx.fillStyle = 'red';\n          ctx.arc(item.x, item.y, 5, 0, Math.PI * 2, true);\n          ctx.fill('evenodd');\n        }\n      });\n\n      intersectionState2.forEach((item) => {\n        if (ctx) {\n          ctx.strokeStyle = 'black';\n          ctx.beginPath();\n          ctx.fillStyle = 'red';\n          ctx.arc(item.x, item.y, 5, 0, Math.PI * 2, true);\n          ctx.fill('evenodd');\n        }\n      });\n    }\n  }, [elements, buttonclick]);\n\n  return (\n    <>\n      <canvas\n        style={{ border: '1px solid red' }}\n        width=\"800px\"\n        height=\"500px\"\n        onClick={startDrawing}\n        onContextMenu={(e) => {\n          e.preventDefault();\n          if (!drawingState) {\n            elements.pop();\n\n            setElements(prev => [...prev]);\n            setIntersectionState([]);\n\n            if (elements[0] === undefined) {\n              setElements([]);\n            }\n\n            setIsDrawing(false);\n            setDrawingState(prev => !prev);\n          }\n        }}\n        onMouseMove={draw}\n        ref={canvasRef}\n      >\n      </canvas>\n      <button onClick={() => setButtonClick(true)}>Collapse lines</button>\n    </>\n  );\n};\n","import { Point2D } from '../types';\n\nexport function intersection(from1: Point2D, to1: Point2D, from2: Point2D, to2: Point2D): Point2D | null {\n  const dX: number = to1.x - from1.x;\n  const dY: number = to1.y - from1.y;\n\n  const determinant: number = dX * (to2.y - from2.y) - (to2.x - from2.x) * dY;\n\n  if (determinant === 0) {\n    return null;\n  }\n\n  const lambda: number = ((to2.y - from2.y) * (to2.x - from1.x) + (from2.x - to2.x) * (to2.y - from1.y)) / determinant;\n  const gamma: number = ((from1.y - to1.y) * (to2.x - from1.x) + dX * (to2.y - from1.y)) / determinant;\n\n  if (!(lambda >= 0 && lambda <= 1) || !(gamma >= 0 && gamma <= 1)) {\n    return null;\n  }\n\n  return {\n    x: from1.x + lambda * dX,\n    y: from1.y + lambda * dY,\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}